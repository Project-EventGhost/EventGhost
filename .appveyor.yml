# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.

version: '{build}-{branch}'

environment:
  PYTHON: 'C:\Python27'

matrix:
  fast_finish: true


#cache:
#  - '%PYTHON%\Lib\site-packages'
#  - '%PYTHON%\Scripts'
#  - '%APPVEYOR_BUILD_FOLDER%\_build\installers\'

install:
  # - ps: Start-FileDownload "https://github.com/appveyor/ci/raw/master/scripts/enable-rdp.ps1" -Timeout 60000
  # - enable-rdp.ps1

  # HTML Help Workshop 1.32
  # - cinst html-help-workshop

  # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
  # - cinst vcredist2008

build: off

after_test:
  - cmd: if not exist _build\installers md _build\installers

  # --------------Downloads and Installs--------------
  - ps: Start-FileDownload "http://www.stackless.com/binaries/python-2.7.12150-stackless.msi" -Timeout 60000 -FileName "_build\installers\stackless-setup.msi"
  - cmd: _build\installers\stackless-setup.msi /quiet /passive /qn /norestart /lx pylog.txt
  - cmd: copy "c:\Python27\python27.dll" "C:\Windows\system32\python27.dll" /Y
  - cmd: copy "c:\Python27\python27.dll" "C:\Windows\SysWOW64\python27.dll" /Y

  - ps: |
      $BuildFolder = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\"
      $SitePackages = $Env:PYTHON + "\Lib\site-packages\"


      python -c "import sys; print(sys.version)"
      (Get-Item "C:\Python27\python27.dll").VersionInfo
      (Get-Item "C:\Windows\system32\python27.dll").VersionInfo
      (Get-Item "C:\Windows\SysWOW64\python27.dll").VersionInfo

      " "
      "----- Installing Stackless Python 2.7 x32 ------"
      " "


#      If (($proc = Get-Process python)) {$proc.Kill()} Else {echo "python not running"}
#      python -c "import sys; print(sys.version)"
#      (Get-Item "C:\Python27\python27.dll").VersionInfo

      " "
      "------------ Installing  Inno Setup ------------"
      " "
      $InnoInstaller = $BuildFolder + "is-unicode.exe"
      If ((Test-Path $InnoInstaller) -eq $False) {
        $InnoURL = "http://files.jrsoftware.org/is/5/innosetup-5.5.9-unicode.exe"
        Start-FileDownload $InnoURL -Timeout 60000 -FileName $InnoInstaller
      }
      & $InnoInstaller "/SP" "/VERYSILENT" "/SUPPRESSMSGBOXES" "/NORESTART" "/RESTARTAPPLICATIONS" "/NOICONS"


      " "
      "--------- Installing  wxPython 3.0.2.0 ---------"
      " "
      $WXInstaller = $BuildFolder + "wxPython3.0-win32-3.0.2.0-py27.exe"
      If ((Test-Path $WXInstaller) -eq $False) {
        $WXURL = "http://downloads.sourceforge.net/wxpython/wxPython3.0-win32-3.0.2.0-py27.exe"
        Start-FileDownload $WXURL -Timeout 60000 -FileName $WXInstaller
        & $WXInstaller "/VERYSILENT" "/SUPPRESSMSGBOXES"
      }

      $PyWinInstaller = $BuildFolder + "pywin32-220.win32-py2.7.exe"
      If ((Test-Path $PyWinInstaller) -eq $False) {
        " "
        "-------------- Installing pywin32 --------------"
        " "
        $PyWinWheel = $BuildFolder + "pywin32-220-cp27-none-win32.whl"
        $PywinPostInstall = $Env:PYTHON + "\Scripts\pywin32_postinstall.py"
        $PyWinURL = "https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220/pywin32-220.win32-py2.7.exe/download"
        Start-FileDownload $PyWinURL -Timeout 60000 -FileName $PyWinInstaller
        cd $BuildFolder
        & "pip" "install" "wheel"
        $ErrorActionPreference = "SilentlyContinue"
        & "wheel" "convert" $PyWinInstaller
        $ErrorActionPreference = "Continue"
        & "pip" "install" $PyWinWheel
        & "python" $PywinPostInstall "-install" "-silent" "-quiet"
        cd ..\..
      }

      " "
      "-------------- Installing Modules --------------"
      " "
      & "pip" "install" "--upgrade" "setuptools"
      & "pip" "install" "commonmark==0.7.2"

      $Jinja = $SitePackages + "jinja2"
      If ((Test-Path $Jinja) -eq $False) {
        & "pip" "install" "jinja2==2.8.1"
      }

      $CTypesLib = $SitePackages + "ctypeslib"
      If ((Test-Path $CTypesLib) -eq $False) {
        & "pip" "install" "-e" "svn+http://svn.python.org/projects/ctypes/trunk/ctypeslib/#egg=ctypeslib-0.5.6"
      }

      $Sphinx = $SitePackages + "sphinx"
      If ((Test-Path $Sphinx) -eq $False) {
        & "pip" "install" "sphinx==1.4.8"
      }

      $PIL = $SitePackages + "PIL"
      If ((Test-Path $PIL) -eq $False) {
        & "pip" "install" "pillow==3.4.2"
      }

      $PyExe = $SitePackages + "py2exe"
      If ((Test-Path $PyExe) -eq $False) {
        & "pip" "install" "py2exe_py2==0.6.9"
      }

      $Pycrypto = $SitePackages + "pycrypto-2.6.1-py2.7-win32.egg"
      If ((Test-Path $Pycrypto) -eq $False) {
        $ErrorActionPreference = "SilentlyContinue"
        & "easy_install" "--always-unzip" "pycrypto"
        $ErrorActionPreference = "Continue"
      }

      $ComTypes = $SitePackages + "comtypes-1.1.3-py2.7.egg"
      If ((Test-Path $ComTypes) -eq $False) {
        $ErrorActionPreference = "SilentlyContinue"
        & "easy_install" "--always-unzip" "comtypes"
        $ErrorActionPreference = "Continue"
      }
      " "
      "--------------- Running Build.Py ---------------"
      " "
#  - cmd: dir "python*.dll" /s
  - cmd: python.exe _build\\Build.py --build --package
  - cmd: dir _build\output\*Setup.exe /B > _build\output\setup-exe.txt
  - cmd: set /P setup-exe= < _build\output\setup-exe.txt
  # - START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS

artifacts:
  - path: _build\output\$(setup-exe)
  - path: _build\output\CHANGELOG_THIS_RELEASE.bb
  - path: _build\output\CHANGELOG_THIS_RELEASE.md
  - path: pylog.txt

#before_deploy:
#  - cmd: python -c "fh=open('_build\\output\\CHANGELOG.md'); txt=fh.read().replace('\n','\\n'); print txt[txt.find('**'):]" > tmp
#  - cmd: set /P CHANGELOG=< tmp

deploy:
    # Deploy to GitHub Releases
  - provider: GitHub
    auth_token: $(GITHUB_TOKEN)
    draft: true
    prerelease: true
    artifact: _build\output\$(setup-exe)
    force_update: true
    # tag: EventGhost_0.5.0-beta6
    # release: EventGhost_0.5.0-beta6
    # description: $(CHANGELOG)
    description: 'Put the contents of [CHANGELOG_THIS_RELEASE.md](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2FCHANGELOG_THIS_RELEASE.md) here instead of this text.'
    on:
      #branch: master          # release from master branch only
      appveyor_repo_tag: true # deploy on tag push only
